template CheckCommand "cloud_gcp" {
    command = [ PluginDir + "/check_cloud_gcp" ]

    arguments = {
        "-j" = {
            value = "$cloud_gcp_json_file$"
            description = "GCP service account key file"
        }
    }
}

object CheckCommand "cloud_gcp_instance" {
    import "cloud_gcp"

    arguments += {
        "compute" = {
            value = "$cloud_gcp_compute$"
            description = "Checks in the Compute Engine context"
        }
        "instance" = {
            value = "$cloud_gcp_instance$"
            description = "Checks a single GCP instance"
        }
        "-z" = {
            value = "$cloud_gcp_zone$"
            description = "GCP zone name"
        }
        "-n" = {
            value = "$cloud_gcp_name$"
            description = "Look for instance by name"
        }
    }

    vars.cloud_gcp_compute = "compute"
    vars.cloud_gcp_instance = "instance"
}

object CheckCommand "cloud_gcp_instances" {
    import "cloud_gcp"

    arguments += {
        "compute" = {
            value = "$cloud_gcp_compute$"
            description = "Checks in the Compute Engine context"
        }
        "instances" = {
            value = "$cloud_gcp_instances$"
            description = "Checks multiple GCP instances"
        }
        "-z" = {
            value = "$cloud_gcp_zone$"
            description = "GCP Zone name, can include wildcards (e.g. \"europe-*\")"
        }
        "-f" = {
            value = "$cloud_gcp_filter$"
            description = "Filter expression that filters resources e.g. '(cpuPlatform = \"Intel Broadwell\") AND (name != \"instance1\")'"
        }
        "--ignore-api-warning" = {
            value = "$cloud_gcp_ignore_api_warning$"
            description = "Disables warning when querying without a zone filter (please do not do that)"
        }
    }

    vars.cloud_gcp_compute = "compute"
    vars.cloud_gcp_instances = "instances"
}

apply Service "cloud_gcp_single_instance" {
    import "generic-service"

    check_command = "cloud_gcp_instance"

    vars.cloud_gcp_zone = "europe-west3-c"
    vars.cloud_gcp_name = "instance1"

    assign where host.name == NodeName
}

apply Service "cloud_gcp_multiple_instances" {
    import "generic-service"

    check_command = "cloud_gcp_instances"

    vars.cloud_gcp_filter = "name != \"instance-1\""

    assign where host.name == NodeName
}
